name: Actions

# repo specific gh actions
env:
  MAIN_PYTHON_VERSION: '3.10'
  PACKAGE_NAME: ansys-mapdl-reader
  PYVISTA_OFF_SCREEN: true
  PYMAPDL_PORT: 21000  # default won't work on GitHub runners
  PYMAPDL_DB_PORT: 21001  # default won't work on GitHub runners
  PYMAPDL_START_INSTANCE: FALSE
  DOCKER_PACKAGE: ghcr.io/pyansys/pymapdl/mapdl
  DOCUMENTATION_CNAME: 'reader.docs.pyansys.com'

on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


jobs:

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys code style checks
        uses: ansys/actions/code-style@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

   
  doc-build:
    name: Build Documentation
    runs-on: ubuntu-latest
  
    steps:
      - uses: actions/checkout@v3
  
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
  
      - name: Setup headless display
        uses: pyvista/setup-headless-display-action@v2
  
      - name: Install ansys-mapdl-reader
        run: |
          pip install -e .
          cd tests/
          python -c "from ansys.mapdl import reader as pymapdl_reader; print(pymapdl_reader.misc.Report())"
  
      - name: Install OS packages
        run: |
          sudo apt-get update
          sudo apt-get install zip pandoc -qy
      
      - name: Install Python requirements
        run: pip install -r ./requirements/requirements_doc.txt
      
      - name: "Run Ansys documentation building action"
        uses: ansys/actions/doc-build@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          sphinxopts: -j auto
          checkout: false
          skip-install: true
      
      - name: Upload HTML Documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation-html
          path: doc/_build/html
          retention-days: 7
  
      - name: Deploy
        if: contains(github.ref, 'refs/heads/main')
        uses: JamesIves/github-pages-deploy-action@v4.4.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: doc/_build/html
          clean: true
          single-commit: true


  build-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    needs: [code-style]

    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: "Install Git and checkout project"
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Build ManyLinux wheel
        if: ${{ runner.os == 'Linux' }}
        run: |
          docker run \
               --rm -v `pwd`:/io \
               quay.io/pypa/manylinux2014_x86_64 \
               /io/.ci/build_wheels.sh ${{ matrix.python-version }}

      - name: Build wheel on Windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          pip install build
          python -m build

      - name: Validate wheel
        run: |
          pip install twine
          twine check dist/*

      - name: Install on Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          pip install wheel
          pip install dist/*.whl
          pip list

      - name: Install on Windows Powershell
        if: ${{ runner.os == 'Windows' }}
        run: |
          pip install wheel
          pip install (get-item .\dist\*.whl)
          pip list

      - name: Setup headless display
        uses: pyvista/setup-headless-display-action@v2

      - name: Install test requirements
        run: |
          pip install -r ./requirements/requirements_docs.txt

      - name: Test
        run: pytest -v tests/ --durations=0

      - uses: codecov/codecov-action@v3
        if: ${{ runner.os == 'Linux' && matrix.python-version == '3.9' }}
        name: 'Upload coverage to Codecov'


  mac-build:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    name: Build wheels on MacOS
    runs-on: macos-latest
    needs: [code-style]

    steps:
      - uses: actions/checkout@v3

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.13.1
        with:
            python-version: 3.8 - 3.11

      - name: List generated wheels
        run: |
          ls ./wheelhouse/*

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl


  package:
    name: Package library
    runs-on: ubuntu-latest
    needs: [doc-build, build-test]
    steps:
      - name: Build library source and wheel artifacts
        uses: ansys/actions/build-library@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}


  doc-deploy-dev:
    name: "Deploy development documentation"
    # Deploy development only when merging to main
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [package]
    steps:
      - name: "Deploy the latest documentation"
        uses: ansys/actions/doc-deploy-dev@v4
        with:
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.GITHUB_TOKEN }}


  release:
    name: "Release project to public PyPI and GitHub"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [package, mac-build]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # this downloads all artifacts
      - uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: ls -R

      - name: Upload to Public PyPi
        run: |
          pip install twine
          twine upload --skip-existing ./**/*.whl
          twine upload --skip-existing ./**/*.tar.gz
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: |
            ./**/*.whl
            ./**/*.zip
            ./**/*.pdf


  doc-deploy-stable:
    name: "Deploy stable documentation"
    # Deploy release documentation when creating a new tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: "Deploy the stable documentation"
        uses: ansys/actions/doc-deploy-stable@v4
        with:
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.GITHUB_TOKEN }}
            python-version: ${{ env.MAIN_PYTHON_VERSION }}
