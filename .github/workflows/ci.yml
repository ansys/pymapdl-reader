name: CI

# repo specific gh actions
env:
  SHELLOPTS: 'errexit:pipefail'
  PACKAGE_NAME: ansys-mapdl-reader
  PYVISTA_OFF_SCREEN: true
  PYMAPDL_PORT: 21000  # default won't work on GitHub runners
  PYMAPDL_DB_PORT: 21001  # default won't work on GitHub runners
  PYMAPDL_START_INSTANCE: FALSE
  DOCKER_PACKAGE: ghcr.io/pyansys/pymapdl/mapdl
  DOCUMENTATION_CNAME: reader.docs.pyansys.com

on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  smoke-tests:
    name: Build wheels and smoke tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Build ManyLinux wheel
        if: ${{ runner.os == 'Linux' }}
        run: |
          docker run \
               --rm -v `pwd`:/io \
               quay.io/pypa/manylinux2014_x86_64 \
               /io/.ci/build_wheels.sh ${{ matrix.python-version }}

      - name: Build wheel on Windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          pip install build
          python -m build

      - name: Validate wheel
        run: |
          pip install twine
          twine check dist/*

      - name: Install on Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          pip install wheel
          pip install dist/*.whl
          pip list

      - name: Install on Windows Powershell
        if: ${{ runner.os == 'Windows' }}
        run: |
          pip install wheel
          pip install (get-item .\dist\*.whl)
          pip list

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ runner.os }}-${{ matrix.python-version }}
          path: dist/
          retention-days: 7


  smoke-tests-mac:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    name: Build wheels on MacOS
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.0

      - name: List generated wheels
        run: |
          ls ./wheelhouse/*

      - uses: actions/upload-artifact@v4
        with:
          path: ./wheelhouse/*.whl


  doc_build:
    name: Build documentation
    runs-on: ubuntu-latest
    steps:
      - name: Setup headless display
        uses: pyvista/setup-headless-display-action@v3

      - name: Build project documentation
        uses: ansys/actions/doc-build@v8
        with:
          dependencies: 'pandoc'
          skip-dependencies-cache: true
          use-python-cache: false
          python-version: "3.10"
          sphinxopts: "-j auto"


  testing:
    name: Testing
    runs-on: ${{ matrix.os }}
    needs: [smoke-tests]
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Setup headless display
        uses: pyvista/setup-headless-display-action@v3

      - name: Install test requirements
        run: pip install -e .[tests]

      - name: Test
        run: pytest -v tests/ --durations=0


  testing-no-graphics:
    name: Testing with minimum requirements (no graphics)
    needs: [smoke-tests]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Setup headless display
        uses: pyvista/setup-headless-display-action@v3

      - name: Install minimal test requirements
        run: |
          pip install -e .[tests-minimal]

      - name: Test
        run: pytest -v tests/ --durations=0


  release:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [doc_build, smoke-tests-mac, testing, testing-no-graphics]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # this downloads all artifacts
      - uses: actions/download-artifact@v4

      - name: Display structure of downloaded files
        run: ls -R

      - name: Compressing HTML documentation
        uses: vimtor/action-zip@v1.2
        with:
          files: documentation-html
          dest: documentation-html.zip

      - name: Upload to Public PyPi
        run: |
          pip install twine
          twine upload --skip-existing ./**/*.whl
          twine upload --skip-existing ./**/*.tar.gz
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: |
            ./**/*.whl
            ./**/*.zip
            ./**/*.pdf


  doc-deploy-release:
    name: Upload release documentation
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Deploy the stable documentation
        uses: ansys/actions/doc-deploy-stable@v8
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}


  doc-deploy-dev:
    name: Upload development documentation
    runs-on: ubuntu-latest
    needs: [testing, testing-no-graphics, doc_build]
    if: github.ref == 'refs/heads/main' && !contains(github.ref, 'refs/tags')
    steps:
      - uses: ansys/actions/doc-deploy-dev@v8
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
