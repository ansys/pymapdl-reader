
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-cyclic_results/academic_sector_nd.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_01-cyclic_results_academic_sector_nd.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-cyclic_results_academic_sector_nd.py:


.. _ref_academic_sector:

Understanding Nodal Diameters from a Cyclic Model Analysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This example shows how to interpret modes from a cyclic analysis from
MAPDL result file from both single bladed sectors as well as
multi-bladed sectors from a modal analysis.

.. GENERATED FROM PYTHON SOURCE LINES 12-18

.. code-block:: default

    # sphinx_gallery_thumbnail_number = 2

    import numpy as np

    from ansys.mapdl.reader import examples








.. GENERATED FROM PYTHON SOURCE LINES 19-20

Download the academic modal analysis file

.. GENERATED FROM PYTHON SOURCE LINES 20-23

.. code-block:: default

    rotor = examples.download_academic_rotor_result()
    print(rotor)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PyMAPDL Result
    Units       : User Defined
    Version     : 20.1
    Cyclic      : True
    Result Sets : 26
    Nodes       : 786
    Elements    : 524


    Available Results:
    EMS : Miscellaneous summable items (normally includes face pressures)
    ENF : Nodal forces
    ENS : Nodal stresses
    ENG : Element energies and volume
    EEL : Nodal elastic strains
    ETH : Nodal thermal strains (includes swelling strains)
    EUL : Element euler angles
    EPT : Nodal temperatures
    NSL : Nodal displacements





.. GENERATED FROM PYTHON SOURCE LINES 24-33

Rotor Sector Order
~~~~~~~~~~~~~~~~~~

Note that the sector rotations follow the right-hand rule where the
X-axis and Y-axis make up the horizontal plane and the Z-axis is
vertical and positive upwards.  Rotation follows the right-hand
rule, which looks anti-clockwise when looking downward onto the XY
plane.


.. GENERATED FROM PYTHON SOURCE LINES 33-37

.. code-block:: default


    _ = rotor.plot_sectors(cpos="xy", stitle="Sector", smooth_shading=True, cmap="bwr")





.. image-sg:: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_001.png
   :alt: academic sector nd
   :srcset: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/pyvista/plotting/_plotting.py:282: PyVistaDeprecationWarning: 
    "stitle" is a deprecated keyword argument and will be removed in a future
    release.

    Use ``scalar_bar_args`` instead.  For example:

    scalar_bar_args={'title': 'Scalar Bar Title'}

      warnings.warn(USE_SCALAR_BAR_ARGS, PyVistaDeprecationWarning)




.. GENERATED FROM PYTHON SOURCE LINES 38-43

Plot Nodal Displacement

This modal analysis contains two modes for each harmonic index.
Since this is a 24 sector rotor, it will contain the harmonic
indices from 0 to N/2, which in this case is 12

.. GENERATED FROM PYTHON SOURCE LINES 43-48

.. code-block:: default



    # Print the harmonic indices with
    print(rotor.harmonic_indices)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [  0   0  -1   1  -2   2   3  -3   4  -4   5  -5   6  -6   7  -7   8  -8
       9  -9  10 -10  11 -11  12  12]




.. GENERATED FROM PYTHON SOURCE LINES 49-51

You can refer to the result set either using MAPDL's 1-based indexing
which is (Load-step, sub-step).

.. GENERATED FROM PYTHON SOURCE LINES 51-53

.. code-block:: default

    _ = rotor.plot_nodal_displacement((2, 2), comp="norm", cpos="xy")




.. image-sg:: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_002.png
   :alt: academic sector nd
   :srcset: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 54-55

Alternatively, you can refer to the results using cumulative indexing.

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: default

    _ = rotor.plot_nodal_displacement(10, comp="norm", cpos="xy")





.. image-sg:: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_003.png
   :alt: academic sector nd
   :srcset: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 59-73

Understanding Harmonic Indexing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ANSYS has great documentation on harmonic indexing within their
internal documentation, but for the sake of completeness it will be repeated here.

The harmonic index used within MAPDL is an integer that determines
the variation in the value of a single degree of freedom at points
spaced at a circumferential angle equal to the sector angle.

For this academic rotor, when the number of "blades" equals the
number of MAPDL sectors, the harmonic index will always match the
nodal diameter.  For example, the cumulative result 10 has a
harmonic index of 5:

.. GENERATED FROM PYTHON SOURCE LINES 73-97

.. code-block:: default


    rnum = 10
    print("Harmonic Index:", rotor.harmonic_indices[rnum])


    # For the purpose of illustrating the nodal diameter content, we
    # restrict the displacement to a narrow range and force the lower and
    # upper ranges of the plot to indicate the phase of the displacement
    #
    # In this plot you can clearly see that the harmonic index is indeed 5
    # as five, and only 5 lines can be drawn through the node lines
    # spanning the circumference of the rotor.
    r = 0.55
    _ = rotor.plot_nodal_displacement(
        rnum,
        comp="norm",
        cpos="xy",
        rng=[r, r + 1e-2],
        stitle=None,
        add_text=False,
        cmap="bwr",
    )





.. image-sg:: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_004.png
   :alt: academic sector nd
   :srcset: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Harmonic Index: 5
    /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/pyvista/plotting/_plotting.py:282: PyVistaDeprecationWarning: 
    "stitle" is a deprecated keyword argument and will be removed in a future
    release.

    Use ``scalar_bar_args`` instead.  For example:

    scalar_bar_args={'title': 'Scalar Bar Title'}

      warnings.warn(USE_SCALAR_BAR_ARGS, PyVistaDeprecationWarning)




.. GENERATED FROM PYTHON SOURCE LINES 98-99

The same can be done for the simpler nodal diameter 1

.. GENERATED FROM PYTHON SOURCE LINES 99-119

.. code-block:: default

    rnum = 3
    print(rotor.harmonic_indices[rnum])

    r = 0
    _ = rotor.plot_nodal_displacement(
        rnum,
        comp="z",
        cpos="xy",
        rng=[r, r + 1e-2],
        add_text=False,
        stitle=None,
        cmap="bwr",
    )


    # Therefore for this rotor with the number of sectors (N) equaling the
    # number of blades, for each harmonic index there can only be one
    # corresponding nodal diameter





.. image-sg:: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_005.png
   :alt: academic sector nd
   :srcset: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    1
    /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/pyvista/plotting/_plotting.py:282: PyVistaDeprecationWarning: 
    "stitle" is a deprecated keyword argument and will be removed in a future
    release.

    Use ``scalar_bar_args`` instead.  For example:

    scalar_bar_args={'title': 'Scalar Bar Title'}

      warnings.warn(USE_SCALAR_BAR_ARGS, PyVistaDeprecationWarning)




.. GENERATED FROM PYTHON SOURCE LINES 120-139

Multi-Bladed Sectors
~~~~~~~~~~~~~~~~~~~~

When there are multiple blades per sector as in the case of the
following example, the relationship between the harmonic indices and
nodal diameters becomes more complicated

In this case, we use the following equation described in the MAPDL
Cyclic Analysis Guide:
d = m*N Â± k

where:
- d is the nodal diameter
- N is the number of sectors
- k is the harmonic index
- m is a set of integers from 0 to infinity

Therefore, for a 6 sector rotor, the first 4 possible nodal diameters at
harmonic index 1 are:

.. GENERATED FROM PYTHON SOURCE LINES 139-148

.. code-block:: default


    N = 6  # number of sectors
    k = 1  # harmonic index
    print("Nodal Diameters :")
    for m in range(5):
        if m > 0:
            print("%4d" % (m * N - k))
        print("%4d" % (m * N + k))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Nodal Diameters :
       1
       5
       7
      11
      13
      17
      19
      23
      25




.. GENERATED FROM PYTHON SOURCE LINES 149-154

Normally for a rotor where the number of blades per sector is 1,
nodal diameters higher than N are simply aliased back to 1 and these
solutions do not appear in the results.  However, when the sector
contains multiple blades per sector, these results do appear in the
analysis since they are not aliased back into a repeated mode.

.. GENERATED FROM PYTHON SOURCE LINES 154-176

.. code-block:: default


    # Therefore in this example part of the above modes will be
    # back-aliased for a 24 blade, 6 sector rotor, and these can be
    # computed with:

    n_blades = 24  # 4 blades per sector
    nodal_diameters = []
    for m in range(5):
        if m > 0:
            nodal_diameters.append(m * N - k)
        nodal_diameters.append(m * N + k)

    print("Nodal Diameters :")
    for d in nodal_diameters:
        if d > n_blades:  # ignore
            continue
        elif d > n_blades // 2:  # back alias
            print("%4d" % -(n_blades - d))
        else:
            print("%4d" % d)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Nodal Diameters :
       1
       5
       7
      11
     -11
      -7
      -5
      -1




.. GENERATED FROM PYTHON SOURCE LINES 177-181

Plot the Multi-Bladed Sector
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We can verify these results by analyzing a multi-sector rotor

.. GENERATED FROM PYTHON SOURCE LINES 181-189

.. code-block:: default


    multi_blade_rotor = examples.download_academic_rotor_4blade_result()

    # plot all the sectors
    _ = multi_blade_rotor.plot_sectors(
        cpos="xy", stitle="Sector", smooth_shading=True, cmap="bwr"
    )




.. image-sg:: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_006.png
   :alt: academic sector nd
   :srcset: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/pyvista/plotting/_plotting.py:282: PyVistaDeprecationWarning: 
    "stitle" is a deprecated keyword argument and will be removed in a future
    release.

    Use ``scalar_bar_args`` instead.  For example:

    scalar_bar_args={'title': 'Scalar Bar Title'}

      warnings.warn(USE_SCALAR_BAR_ARGS, PyVistaDeprecationWarning)




.. GENERATED FROM PYTHON SOURCE LINES 190-193

We can then see that the harmonic indices for harmonic index 1
indeed alias back to the expected nodal diameters in the following
plots.

.. GENERATED FROM PYTHON SOURCE LINES 193-198

.. code-block:: default

    print(multi_blade_rotor.harmonic_indices)

    hi_1 = np.nonzero(multi_blade_rotor.harmonic_indices == 1)[0]
    print("Cumulative indices matching harmonic index 1:", hi_1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ 0  0  0  0  0  0  0  0  1 -1  1 -1 -1  1 -1  1 -2  2 -2  2 -2  2 -2  2
      3  3  3  3  3  3  3  3]
    Cumulative indices matching harmonic index 1: [ 8 10 13 15]




.. GENERATED FROM PYTHON SOURCE LINES 199-200

Cumulative result 8 and harmonic index 1

.. GENERATED FROM PYTHON SOURCE LINES 200-207

.. code-block:: default

    rnum = 8
    text = "Expected Nodal Diameter %2d" % nodal_diameters[0]
    _ = multi_blade_rotor.plot_nodal_displacement(
        rnum, comp="z", cpos="xy", rng=[r, r + 1e-2], add_text=text, stitle=None, cmap="bwr"
    )





.. image-sg:: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_007.png
   :alt: academic sector nd
   :srcset: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/pyvista/plotting/_plotting.py:282: PyVistaDeprecationWarning: 
    "stitle" is a deprecated keyword argument and will be removed in a future
    release.

    Use ``scalar_bar_args`` instead.  For example:

    scalar_bar_args={'title': 'Scalar Bar Title'}

      warnings.warn(USE_SCALAR_BAR_ARGS, PyVistaDeprecationWarning)




.. GENERATED FROM PYTHON SOURCE LINES 208-209

Cumulative result 10 and harmonic index 5

.. GENERATED FROM PYTHON SOURCE LINES 209-216

.. code-block:: default

    rnum = 10
    text = "Expected Nodal Diameter %2d" % nodal_diameters[1]
    _ = multi_blade_rotor.plot_nodal_displacement(
        rnum, comp="z", cpos="xy", rng=[r, r + 1e-2], add_text=text, stitle=None, cmap="bwr"
    )





.. image-sg:: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_008.png
   :alt: academic sector nd
   :srcset: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/pyvista/plotting/_plotting.py:282: PyVistaDeprecationWarning: 
    "stitle" is a deprecated keyword argument and will be removed in a future
    release.

    Use ``scalar_bar_args`` instead.  For example:

    scalar_bar_args={'title': 'Scalar Bar Title'}

      warnings.warn(USE_SCALAR_BAR_ARGS, PyVistaDeprecationWarning)




.. GENERATED FROM PYTHON SOURCE LINES 217-218

Cumulative result 13 and harmonic index 7

.. GENERATED FROM PYTHON SOURCE LINES 218-225

.. code-block:: default

    rnum = 13
    text = "Expected Nodal Diameter %2d" % nodal_diameters[2]
    _ = multi_blade_rotor.plot_nodal_displacement(
        rnum, comp="z", cpos="xy", rng=[r, r + 1e-2], add_text=text, stitle=None, cmap="bwr"
    )





.. image-sg:: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_009.png
   :alt: academic sector nd
   :srcset: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_009.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/pyvista/plotting/_plotting.py:282: PyVistaDeprecationWarning: 
    "stitle" is a deprecated keyword argument and will be removed in a future
    release.

    Use ``scalar_bar_args`` instead.  For example:

    scalar_bar_args={'title': 'Scalar Bar Title'}

      warnings.warn(USE_SCALAR_BAR_ARGS, PyVistaDeprecationWarning)




.. GENERATED FROM PYTHON SOURCE LINES 226-227

Cumulative result 15 and harmonic index 11

.. GENERATED FROM PYTHON SOURCE LINES 227-234

.. code-block:: default

    rnum = 15
    text = "Expected Nodal Diameter %2d" % nodal_diameters[3]
    _ = multi_blade_rotor.plot_nodal_displacement(
        rnum, comp="z", cpos="xy", rng=[r, r + 1e-2], add_text=text, stitle=None, cmap="bwr"
    )





.. image-sg:: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_010.png
   :alt: academic sector nd
   :srcset: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_010.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/pyvista/plotting/_plotting.py:282: PyVistaDeprecationWarning: 
    "stitle" is a deprecated keyword argument and will be removed in a future
    release.

    Use ``scalar_bar_args`` instead.  For example:

    scalar_bar_args={'title': 'Scalar Bar Title'}

      warnings.warn(USE_SCALAR_BAR_ARGS, PyVistaDeprecationWarning)




.. GENERATED FROM PYTHON SOURCE LINES 235-248

Traveling Wave Animation
~~~~~~~~~~~~~~~~~~~~~~~~
You can animate the traveling wave for a cyclic result using
``animate_nodal_displacement``.  For a modal result, be sure to
modify ``displacement_factor`` to a value that properly scales the
modal solution.  Recall that solutions to a modal analysis from
MAPDL may or may not be scaled to unity or the mass matrix depending
on the settings within the modal analysis.

Set ``loop=True`` to allow for a continuous plot, and modify
``n_frames`` to allow for a smoother or faster plot.  See
``help(pyvista.plot)`` for additional keyword arguments.


.. GENERATED FROM PYTHON SOURCE LINES 248-260

.. code-block:: default

    _ = rotor.animate_nodal_displacement(
        (3, 1),
        displacement_factor=0.03,
        n_frames=30,
        show_axes=False,
        background="w",
        loop=False,
        add_text=False,
        movie_filename="EO3_Mode1.gif",
    )





.. image-sg:: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_011.gif
   :alt: academic sector nd
   :srcset: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_011.gif
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 261-264

Note how you can plot the backwards traveling wave by selecting the
second mode in the mode pair ``(3, 2)`` instead of ``(3, 1)``.


.. GENERATED FROM PYTHON SOURCE LINES 264-274

.. code-block:: default

    _ = rotor.animate_nodal_displacement(
        (3, 2),
        displacement_factor=0.03,
        n_frames=30,
        show_axes=False,
        background="w",
        loop=False,
        add_text=False,
        movie_filename="EO3_Mode1.gif",
    )



.. image-sg:: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_012.gif
   :alt: academic sector nd
   :srcset: /examples/01-cyclic_results/images/sphx_glr_academic_sector_nd_012.gif
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  18.271 seconds)


.. _sphx_glr_download_examples_01-cyclic_results_academic_sector_nd.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: academic_sector_nd.py <academic_sector_nd.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: academic_sector_nd.ipynb <academic_sector_nd.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
